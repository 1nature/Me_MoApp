@page "/userentryform"
@using BlazorApp1.Data
@using Me_MoApp
@inject UserDataService udx

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment

<h3>New User Entry Form</h3>

<EditForm Model="User" OnSubmit="OnSubmit">
    <div class="card mx-auto" style="width: 40rem;">
        <div class="col-md-4">
            <label for="user ID" class="form-label">User ID</label>
            <InputNumber @bind-Value="User.ID"></InputNumber>
        </div>

        <div class="col-md-4">
            <label for="picture" class="form-label">Picture</label>
            <InputFile OnChange="LoadFiles" />
        </div>

        <div class="col-md-4">
            <label for="first name" class="form-label">First Name</label>
            <InputText @bind-Value="User.FirstName"></InputText>
        </div>

        <div class="col-md-4">
            <label for="last name" class="form-label">Last Name</label>
            <InputText @bind-Value="User.LastName"></InputText>
        </div>
        <p></p>
        <div class="col-md-4">
            <label for="sex" class="form-label">Sex</label>
            <InputSelect @bind-Value="User.Sex">
                <option value="">
                    Choose sex
                </option>
                <option checked="@(User.Sex == "Male")"
                value="Male">
                    Male
                </option>
                <option checked="@(User.Sex == "Female")"
                value="Female">
                    Female
                </option>
            </InputSelect>

            <div class="col-md-4">
                <label for="phone number" class="form-label">Phonenumber</label>
                <InputText @bind-Value="User.Phone.PhoneNumber"></InputText>
            </div>

        </div>

        <br />
        <button type="submit" class="col-md-2 md-start">Send</button>
    </div>
</EditForm>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15000;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    public User User { get; set; } = new();

    void OnSubmit()
    {
        udx.Save();
        udx.Users.Add(User);

    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.GetRandomFileName() + "." + Path.GetExtension(file.Name); //TODO: probalby generate random name but keep original file extension
                var rootPath = Environment.ContentRootPath;
                var imageFolderPath = "wwwroot\\images";
                var path = Path.Combine(rootPath, imageFolderPath);
                path = Path.Combine(path, trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                User.Picture = trustedFileName;

                //condition added for now
                // if (Post.Path == null)
                // {
                //     Post.Path = path;
                // }

            }
            catch (Exception ex)
            {
                ;
            }
        }

        isLoading = false;
    }

}
