@page "/postentryform"
@using BlazorApp2.Components.Shared
@using BlazorApp2.Data
@using Me_MoApp
@inject UserDataService uds
@inject PostDataService pds


@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment

<PageTitle>PostInputInterface</PageTitle>

<h3>Post Entry Form</h3>

<EditForm Model="Post" OnSubmit="OnSubmit">
    <div class="card mx-auto" style="width: 40rem;">
        <div class="col-md-4">
            <label for="picture" class="form-label">Picture</label>
            <InputFile OnChange="LoadFiles" />
        </div>

        <div class="col-md-4">
            <label for="description" class="form-label">Description</label>
            <InputText @bind-Value="Post.Description"></InputText>
        </div>


        @*   <InputNumber @bind-Value="Post.Categorization"></InputNumber>  *@
        @* <InputNumber @bind-Value="Post.Votes"></InputNumber> *@
        <br />

        <button type="submit" class="col-md-2 md-start">Send</button>
        <br />
        <AddVendorEntry @bind-Post="DPost"></AddVendorEntry>
        
    </div>
</EditForm>



@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15000;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    public Post Post { get; set; } = new();

    [Parameter]
    public Post DPost { get; set; } = new();

    void OnSubmit()
    {
        Post.TimeStamp = DateTime.Now;
        Post.User = uds.GetUsers()[0]; //to stand in for the logged user

        //example!
        // int maxID = 0;
        // foreach(var post in pds.Posts)
        // {
        //     if (post.ID > maxID)
        //         maxID = post.ID;
        // }

        Post.ID = pds.Posts.Max(p => p.ID) + 1;
        pds.Posts.Add(Post);
        LogicMethod.SavePostDataToDisk(pds.Posts);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.GetRandomFileName() + "." + Path.GetExtension(file.Name); //TODO: probalby generate random name but keep original file extension
                var rootPath = Environment.ContentRootPath;
                var imageFolderPath = "wwwroot\\images";
                var path = Path.Combine(rootPath, imageFolderPath);
                path = Path.Combine(path, trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Post.Paths.Add(trustedFileName);



                //condition added for now
                // if (Post.Path == null)
                // {
                //     Post.Path = path;
                // }

            }
            catch (Exception ex)
            {
                ;
            }
        }

        isLoading = false;
    }
}

@* need to refix the file upload *@
@* at what point do I serialize *@
@* store new users so that they do not go away *@
@* calculate total votes of all posts *@
@* do user validation *@
@* GET RID OF USING TEST DATA *@
