@page "/editpostform/{PostID:int}"
@* @page "/editpostform/" *@
@using BlazorApp2.Data
@using Me_MoApp
@inject UserDataService uds
@inject PostDataService pds
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject Data.ApplicationDbContext dbContext;


@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IWebHostEnvironment Environment

<PageTitle>PostInputInterface</PageTitle>

@if (PostID == 0)
{
    <h3>New Post Entry Form</h3>
}
else
{
    <h3>Edit Post Form</h3>
}

<EditForm Model="Post" OnSubmit="OnSubmit">
    <div class="card mx-auto" style="width: 40rem;">
        <div class="col-md-4">
            <label for="firstname" class="form-label">First Name</label>
            <InputText @bind-Value="Post.User.FirstName"></InputText>
        </div>

        <div class="col-md-4">
            <label for="lastname" class="form-label">Last Name</label>
            <InputText @bind-Value="Post.User.LastName"></InputText>
        </div>

        <div class="col-md-4">
            <label for="picture" class="form-label">Picture</label>
            <InputFile OnChange="LoadFiles" />
        </div>
        <br />
        <div class="col-md-4">
            <label for="description" class="form-label">Description</label>
            <InputText @bind-Value="Post.Description"></InputText>
        </div>
        <br />

        @if (Post != null)
        {
            <div class="col-xl-4">
                <select class="form-control" @bind="Post.Categorization">
                    <option value="">Select Category</option>
                    @foreach (var category in Enum.GetValues(typeof(PostCategory)))
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
        }
        <br />
        <button type="submit" class="col-md-2 md-start">Send</button>
    </div>
</EditForm>



@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15000;
    private int maxAllowedFiles = 3;
    private bool isLoading;


    public Post Post { get; set; } = new(); // Does this need a parameter?

    // [Parameter]
    // public Post? DPost { get; set; } = new(); // This is the post being edited or created

    [Parameter]
    public int PostID { get; set; }


    protected override void OnParametersSet()
    {
        if (PostID != 0)
        {
            // Load the post data from the service based on PostID
            //Post = dbContext.Posts.Where(p => p.ID == PostID).First();

            //Verbose
            foreach (var post in dbContext.Posts)
            {
                if (post.ID == PostID)
                {
                    Post = post;
                    break;
                }
            }
        }


        base.OnParametersSet();
    }



    async Task OnSubmit()
    {
        if (PostID == 0)
        {

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var claims = authState.User;
            var currentlyLoggedInUser = await UserManager.GetUserAsync(claims);
            //additional code to  pull all user data but how?

            // var userWithData = dbContext.Users.Include(u => u.UserData).
            // FirstOrDefault(u => u.Id == currentlyLoggedInUser.Id);

            var userWithData = dbContext.Users.Include(u => u.UserData).
            FirstOrDefault(u => u.Id == currentlyLoggedInUser.Id);

            // Users.Include(u => u.UserData).
            // FirstOrDefault(u => u.Id == currentlyLoggedInUser.Id);
            
            // var userWithData = dbContext.Users.Include(u => u.UserData).
            // FirstOrDefault(u => u.Id == currentlyLoggedInUser.User.ID);
            

            //do migration
            //change user class to userdata class in applicationuser class
            //try again

            if (currentlyLoggedInUser == null) // nobody logged in
            {
                return;
            }

            //dbContext.Posts.Add(Post);

            Post.TimeStamp = DateTime.Now;
            Post.User = new UserData //TODO: replace with currently logged in userData
            {
                //Should I be getting data from database now?
                FirstName = currentlyLoggedInUser.UserData?.FirstName,
                LastName = currentlyLoggedInUser.UserData?.LastName,
                // Picture = currentlyLoggedInUser.User.Picture, // Assuming Picture is a string or path to the image
                // Sex = currentlyLoggedInUser.User.Sex
            };

            dbContext.Posts.Add(Post);
        }
        dbContext.SaveChanges(); // Save changes to the database

    }

    

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.GetRandomFileName() + "." + Path.GetExtension(file.Name); //TODO: probalby generate random name but keep original file extension
                var rootPath = Environment.ContentRootPath;
                var imageFolderPath = "wwwroot\\images";
                var path = Path.Combine(rootPath, imageFolderPath);
                path = Path.Combine(path, trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Post.Paths.Add(trustedFileName);
            }
            catch (Exception ex)
            {
                //Console.Error.WriteLine($"Error uploading file '{file.Name}': {ex.Message}");


                ;
            }
        }

        isLoading = false;
    }
}








