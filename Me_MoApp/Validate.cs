namespace Me_MoApp
{
    public class Validate
    {
        public int ID { get; set; }
        private DateTime _timeStamp;
        public DateTime TimeStamp
        {
            get { return _timeStamp; }
            set { _timeStamp = value; }
        }

        // to store all posts
        private List<Post> _posts = new();
        public List<Post> Posts
        {
            get { return _posts; }
            set { _posts = value; }
        }

        public void GetAllPosts()
        {

            // This is just an example, you may want to modify it based on your requirements

            var post = new Post();
            foreach (var p in _posts)
            {
                Posts.Add(post);
            }
        }

        public int SumTheTotalVotesInAllPosts
        {
            get
            {
                var sumOfAllVotes = 0;
                foreach (var p in _posts)
                {
                    sumOfAllVotes += p.TotalVotesOnEachPost; //assuming TotalVotesOnEachPost is an int property in Post class
                }
                return sumOfAllVotes;
            }
        }
    

        private StatusCategory _status;
        public StatusCategory Status
        {
            get { return _status; }
            set { _status = value; }
        }

        private double _validationScore;
        public double ValidationScore
        {
            get { return _validationScore; }
            set { _validationScore = value; }
        }


        // to store all users
        private List<User> _users = new();
        public List<User> Users
        {
            get { return _users; }
            set { _users = value; }
        }

        public void GetAllUsers()
        {
            // This is just an example, you may want to modify it based on your requirements
            var user = new User();
            foreach (var u in _users)
            {
                Users.Add(user);
            }
        }

        //public static int SumTheVotesGeneratedByEachUser(User user, List<Post> allPosts)
        //{
        //    int totalUserVote = 0;
        //    foreach (Post p in allPosts)
        //    {
        //        foreach (Vote v in p.Votes)
        //        {
        //            if (v.User.ID == user.ID) //use ID because of value types VS reference type
        //            {
        //                totalUserVote += v.Value; //assuming Value is the property in Vote class that holds the vote value
        //            }
        //        }
        //    }
        //    return totalUserVote;
        //}

        public int TotalVotesGeneratedFromUserPosts
        {
            get
            {
                int totalVotes = 0;
                var user = new User();

                foreach (Post p in _posts)
                {
                    foreach (Vote v in p.Votes)
                    {
                        if (v.User.ID == user.ID) // Check if User is not null to avoid NullReferenceException
                        {
                            totalVotes += v.Value; // Assuming Value is the property in Vote class that holds the vote value
                        }
                    }
                }
                return totalVotes;
            }
        }

        //public int SumTheVotesGeneratedByEachUser(List<Post>allPosts)
        //{
        //    foreach (var p in allPosts)
        //    {
        //        if (p.User != null)
        //        {
        //            p.User. // Assuming EachUserVote is a property in User class that holds the total votes generated by that user
        //        }
        //        // Assuming EachUserVote is a property in User class that holds the total votes generated by that user
        //        u.EachUserVote = 0; // Resetting each user's vote count before summing
        //    }
        //}

        private bool _isValidated;
        public bool IsValidated
        {
            get { return _isValidated; }
            set
            {
                ValidationScore = TotalVotesGeneratedFromUserPosts / SumTheTotalVotesInAllPosts * 100; // Calculate the validation score as a percentage
                if (ValidationScore >= 90)
                {
                    _isValidated = true;
                }
            }
        }
    }
}
